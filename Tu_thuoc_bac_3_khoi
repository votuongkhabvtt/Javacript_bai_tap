<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tủ Thuốc Bắc 3 Khối Chồng Nhau</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #e4e7eb 100%);
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            color: #333;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
            max-width: 1200px;
            background: rgba(139, 69, 19, 0.1);
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            color: #8B4513;
            margin-bottom: 15px;
            font-size: 2.5rem;
        }
        
        .subtitle {
            color: #5D4037;
            font-size: 1.2rem;
            margin-bottom: 20px;
        }
        
        .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: white;
            border-radius: 15px;
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
            padding: 30px;
            max-width: 1200px;
            width: 100%;
        }
        
        .canvas-container {
            position: relative;
            margin: 25px 0;
            border-radius: 10px;
            overflow: hidden;
            width: 100%;
            height: 700px;
            background: #f9f9f9;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
        }
        
        #cabinetCanvas {
            display: block;
            background-color: #f5f5f5;
        }
        
        .specs {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 30px;
            width: 100%;
            margin-top: 30px;
        }
        
        .spec-card {
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            border-top: 5px solid #8B4513;
            transition: transform 0.3s ease;
        }
        
        .spec-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.12);
        }
        
        .spec-card h3 {
            color: #8B4513;
            margin-top: 0;
            margin-bottom: 20px;
            font-size: 1.5rem;
            text-align: center;
            padding-bottom: 15px;
            border-bottom: 2px solid #e0d6c9;
        }
        
        .spec-card ul {
            padding-left: 25px;
            margin: 15px 0;
        }
        
        .spec-card li {
            margin-bottom: 12px;
            line-height: 1.6;
            font-size: 1.05rem;
        }
        
        .highlight {
            background-color: #fff8e1;
            padding: 4px 8px;
            border-radius: 5px;
            font-weight: 600;
            color: #5D4037;
        }
        
        .dimension {
            display: inline-block;
            padding: 4px 12px;
            background: #8B4513;
            color: white;
            border-radius: 5px;
            font-weight: bold;
            margin: 0 5px;
        }
        
        .controls {
            display: flex;
            gap: 20px;
            margin: 25px 0;
            flex-wrap: wrap;
            justify-content: center;
        }
        
        button {
            background: linear-gradient(to right, #8B4513, #A0522D);
            color: white;
            border: none;
            padding: 15px 35px;
            border-radius: 50px;
            cursor: pointer;
            font-size: 1.1rem;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(139, 69, 19, 0.3);
            font-weight: 600;
            min-width: 250px;
        }
        
        button:hover {
            background: linear-gradient(to right, #A0522D, #8B4513);
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(139, 69, 19, 0.4);
        }
        
        button.active {
            box-shadow: 0 0 0 3px rgba(139, 69, 19, 0.5);
        }
        
        @media (max-width: 900px) {
            .canvas-container {
                height: 500px;
            }
            
            .specs {
                grid-template-columns: 1fr;
            }
            
            button {
                width: 100%;
                max-width: 300px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>THIẾT KẾ TỦ THUỐC BẮC 3 KHỐI CHỒNG NHAU</h1>
        <p class="subtitle">Khối A - Khối B - Khối C | Màu gỗ cánh gián | Vách ngăn di động</p>
    </div>
    
    <div class="container">
        <div class="canvas-container">
            <canvas id="cabinetCanvas" width="1100" height="700"></canvas>
        </div>
        
        <div class="controls">
            <button id="viewFront" class="active">Mặt Trước</button>
            <button id="viewSide">Mặt Nghiêng</button>
            <button id="viewDetails">Chi Tiết Khối</button>
        </div>
        
        <div class="specs">
            <div class="spec-card">
                <h3>KHỐI A (DƯỚI CÙNG)</h3>
                <ul>
                    <li><span class="highlight">Kích thước</span>: Cao <span class="dimension">1m</span> × Rộng <span class="dimension">3.7m</span> × Sâu <span class="dimension">1m</span></li>
                    <li>Số ô: <span class="highlight">9 ô cửa</span> (3.7m / 0.4m ≈ 9 ô)</li>
                    <li>Mỗi ô: Cao <span class="dimension">0.98m</span> × Rộng <span class="dimension">0.4m</span></li>
                    <li>Cửa 1 cánh có khóa</li>
                    <li>Đợt ngang di động: Dài <span class="dimension">0.98m</span> × Rộng <span class="dimension">0.4m</span> × Dày <span class="dimension">1cm</span></li>
                    <li>Chất liệu: Gỗ cánh gián dày <span class="dimension">1cm</span></li>
                </ul>
            </div>
            
            <div class="spec-card">
                <h3>KHỐI B (GIỮA)</h3>
                <ul>
                    <li><span class="highlight">Kích thước</span>: Cao <span class="dimension">1.6m</span> (8×0.2m) × Rộng <span class="dimension">3.6m</span> (12×0.3m) × Sâu <span class="dimension">0.59m</span></li>
                    <li>Số ngăn kéo: <span class="highlight">96 ngăn</span> (12 cột × 8 hàng)</li>
                    <li>Mỗi ngăn kéo: Cao <span class="dimension">20cm</span> × Rộng <span class="dimension">30cm</span> × Sâu <span class="dimension">59cm</span></li>
                    <li>Vách ngăn dọc: Dày <span class="dimension">1cm</span> chia mỗi ngăn thành 2 ngăn nhỏ</li>
                    <li>Ngăn nhỏ: Cao <span class="dimension">20cm</span> × Rộng <span class="dimension">30cm</span> × Sâu <span class="dimension">29cm</span></li>
                    <li>Hệ thống ray bi trượt cho từng ngăn</li>
                </ul>
            </div>
            
            <div class="spec-card">
                <h3>KHỐI C (TRÊN CÙNG)</h3>
                <ul>
                    <li><span class="highlight">Kích thước</span>: Cao <span class="dimension">0.5m</span> × Rộng <span class="dimension">3.7m</span> × Sâu <span class="dimension">0.6m</span></li>
                    <li>Số ô: <span class="highlight">9 ô cửa</span> (3.7m / 0.4m ≈ 9 ô)</li>
                    <li>Mỗi ô: Cao <span class="dimension">0.5m</span> × Rộng <span class="dimension">0.4m</span></li>
                    <li>Cửa 1 cánh bản lề cường lực (không khóa)</li>
                    <li>Đợt ngang di động: Dài <span class="dimension">0.59m</span> × Rộng <span class="dimension">0.4m</span> × Dày <span class="dimension">1cm</span></li>
                    <li>Chất liệu: Gỗ cánh gián dày <span class="dimension">1cm</span></li>
                </ul>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const canvas = document.getElementById('cabinetCanvas');
            const ctx = canvas.getContext('2d');
            const viewFrontBtn = document.getElementById('viewFront');
            const viewSideBtn = document.getElementById('viewSide');
            const viewDetailsBtn = document.getElementById('viewDetails');
            
            // Tỷ lệ vẽ
            let scale = 1.5;
            
            // Màu sắc
            const woodColor = '#8B4513';
            const darkWood = '#5D4037';
            const lightWood = '#A0522D';
            const drawerFrontColor = '#7D3C1F';
            const handleColor = '#000';
            const highlightColor = '#E74C3C';
            const baseColor = '#5D4037';
            const dividerColor = '#5D4037';
            
            // Biến trạng thái
            let currentView = 'front';
            
            // Kích thước các khối (mm)
            const dimensions = {
                blockA: { width: 3700, height: 1000, depth: 1000 },
                blockB: { width: 3600, height: 1600, depth: 590 },
                blockC: { width: 3700, height: 500, depth: 600 }
            };
            
            // Kích thước các ô/ngăn
            const compartmentA = { height: 980, width: 400 };
            const drawerB = { height: 200, width: 300, depth: 590 };
            const compartmentC = { height: 500, width: 400 };
            
            // Vẽ tủ theo chế độ xem
            function drawCabinet() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                
                // Vẽ nền
                ctx.fillStyle = '#f5f5f5';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                switch(currentView) {
                    case 'front':
                        drawFrontView();
                        break;
                    case 'side':
                        drawSideView();
                        break;
                    case 'details':
                        drawDetailsView();
                        break;
                }
            }
            
            // Vẽ mặt trước
            function drawFrontView() {
                const startX = (canvas.width - dimensions.blockA.width * scale / 10) / 2;
                const startY = canvas.height * 0.9 - (dimensions.blockA.height + dimensions.blockB.height + dimensions.blockC.height) * scale / 10;
                
                // Vẽ khối A
                drawBlockA(startX, startY);
                
                // Vẽ khối B
                const blockBY = startY + dimensions.blockA.height * scale / 10;
                drawBlockB(startX + (dimensions.blockA.width - dimensions.blockB.width) * scale / 10 / 2, blockBY);
                
                // Vẽ khối C
                const blockCY = blockBY + dimensions.blockB.height * scale / 10;
                drawBlockC(startX, blockCY);
                
                // Vẽ tiêu đề
                ctx.font = 'bold 28px Arial';
                ctx.fillStyle = '#5D4037';
                ctx.textAlign = 'center';
                ctx.fillText('THIẾT KẾ TỦ THUỐC BẮC - MẶT TRƯỚC', canvas.width / 2, 40);
                
                // Vẽ chú thích
                ctx.font = '16px Arial';
                ctx.fillStyle = '#5D4037';
                ctx.textAlign = 'center';
                ctx.fillText('Tủ gồm 3 khối chồng nhau: Khối A (dưới) - Khối B (giữa) - Khối C (trên)', canvas.width / 2, canvas.height - 30);
            }
            
            // Vẽ khối A
            function drawBlockA(x, y) {
                // Vẽ thân khối
                ctx.fillStyle = woodColor;
                ctx.fillRect(x, y, dimensions.blockA.width * scale / 10, dimensions.blockA.height * scale / 10);
                
                // Vẽ các ô cửa (9 ô)
                const cols = Math.floor(dimensions.blockA.width / compartmentA.width);
                const doorWidth = dimensions.blockA.width * scale / 10 / cols;
                
                for (let i = 0; i < cols; i++) {
                    const doorX = x + i * doorWidth;
                    
                    // Vẽ cửa
                    ctx.strokeStyle = darkWood;
                    ctx.lineWidth = 3;
                    ctx.strokeRect(doorX, y, doorWidth, dimensions.blockA.height * scale / 10);
                    
                    // Vẽ đợt ngang
                    ctx.fillStyle = dividerColor;
                    const shelfY = y + dimensions.blockA.height * scale / 10 / 2 - 5;
                    ctx.fillRect(doorX + 10, shelfY, doorWidth - 20, 10);
                    
                    // Vẽ khóa
                    ctx.beginPath();
                    ctx.fillStyle = handleColor;
                    ctx.arc(doorX + doorWidth - 30, y + dimensions.blockA.height * scale / 10 / 2, 8, 0, Math.PI * 2);
                    ctx.fill();
                }
                
                // Vẽ chân tủ
                ctx.fillStyle = baseColor;
                ctx.fillRect(x - 20, y + dimensions.blockA.height * scale / 10, dimensions.blockA.width * scale / 10 + 40, 20);
            }
            
            // Vẽ khối B
            function drawBlockB(x, y) {
                // Vẽ thân khối
                ctx.fillStyle = lightWood;
                ctx.fillRect(x, y, dimensions.blockB.width * scale / 10, dimensions.blockB.height * scale / 10);
                
                // Vẽ các ngăn kéo (12 cột x 8 hàng)
                const cols = 12;
                const rows = 8;
                const drawerPixelWidth = dimensions.blockB.width * scale / 10 / cols;
                const drawerPixelHeight = dimensions.blockB.height * scale / 10 / rows;
                
                for (let row = 0; row < rows; row++) {
                    for (let col = 0; col < cols; col++) {
                        const drawerX = x + col * drawerPixelWidth;
                        const drawerY = y + row * drawerPixelHeight;
                        
                        // Vẽ mặt trước ngăn kéo
                        ctx.fillStyle = drawerFrontColor;
                        ctx.fillRect(drawerX, drawerY, drawerPixelWidth, drawerPixelHeight);
                        
                        // Vẽ viền ngăn kéo
                        ctx.strokeStyle = darkWood;
                        ctx.lineWidth = 1;
                        ctx.strokeRect(drawerX, drawerY, drawerPixelWidth, drawerPixelHeight);
                        
                        // Vẽ vách ngăn dọc
                        ctx.fillStyle = dividerColor;
                        ctx.fillRect(drawerX + drawerPixelWidth / 2 - 5, drawerY, 10, drawerPixelHeight);
                        
                        // Vẽ tay nắm (2 tay nắm cho 2 ngăn nhỏ)
                        ctx.beginPath();
                        ctx.fillStyle = handleColor;
                        ctx.arc(drawerX + drawerPixelWidth / 4, drawerY + drawerPixelHeight / 2, 5, 0, Math.PI * 2);
                        ctx.fill();
                        
                        ctx.beginPath();
                        ctx.fillStyle = handleColor;
                        ctx.arc(drawerX + drawerPixelWidth * 3/4, drawerY + drawerPixelHeight / 2, 5, 0, Math.PI * 2);
                        ctx.fill();
                    }
                }
            }
            
            // Vẽ khối C
            function drawBlockC(x, y) {
                // Vẽ thân khối
                ctx.fillStyle = woodColor;
                ctx.fillRect(x, y, dimensions.blockC.width * scale / 10, dimensions.blockC.height * scale / 10);
                
                // Vẽ các ô cửa (9 ô)
                const cols = Math.floor(dimensions.blockC.width / compartmentC.width);
                const doorWidth = dimensions.blockC.width * scale / 10 / cols;
                
                for (let i = 0; i < cols; i++) {
                    const doorX = x + i * doorWidth;
                    
                    // Vẽ cửa
                    ctx.strokeStyle = darkWood;
                    ctx.lineWidth = 3;
                    ctx.strokeRect(doorX, y, doorWidth, dimensions.blockC.height * scale / 10);
                    
                    // Vẽ đợt ngang
                    ctx.fillStyle = dividerColor;
                    const shelfY = y + dimensions.blockC.height * scale / 10 / 2 - 5;
                    ctx.fillRect(doorX + 10, shelfY, doorWidth - 20, 10);
                    
                    // Vẽ bản lề (không khóa)
                    ctx.beginPath();
                    ctx.fillStyle = '#777';
                    ctx.arc(doorX + 15, y + dimensions.blockC.height * scale / 10 / 2, 5, 0, Math.PI * 2);
                    ctx.fill();
                }
            }
            
            // Vẽ mặt nghiêng
            function drawSideView() {
                // Góc nhìn nghiêng
                const angle = Math.PI / 6; // 30 độ
                
                // Hàm chuyển đổi tọa độ 3D sang 2D
                function project(x, y, z) {
                    const projectedX = (x - z * Math.cos(angle)) * scale / 10 + canvas.width * 0.3;
                    const projectedY = canvas.height * 0.9 - (y + z * Math.sin(angle)) * scale / 10;
                    return { x: projectedX, y: projectedY };
                }
                
                // Vẽ khối A
                const blockAPoints = [
                    project(0, 0, 0),
                    project(dimensions.blockA.width, 0, 0),
                    project(dimensions.blockA.width, dimensions.blockA.height, 0),
                    project(0, dimensions.blockA.height, 0),
                    project(0, dimensions.blockA.height, dimensions.blockA.depth),
                    project(0, 0, dimensions.blockA.depth),
                    project(dimensions.blockA.width, 0, dimensions.blockA.depth),
                    project(dimensions.blockA.width, dimensions.blockA.height, dimensions.blockA.depth)
                ];
                
                // Mặt bên trái
                ctx.beginPath();
                ctx.moveTo(blockAPoints[0].x, blockAPoints[0].y);
                ctx.lineTo(blockAPoints[5].x, blockAPoints[5].y);
                ctx.lineTo(blockAPoints[4].x, blockAPoints[4].y);
                ctx.lineTo(blockAPoints[3].x, blockAPoints[3].y);
                ctx.closePath();
                ctx.fillStyle = '#6B2B0F';
                ctx.fill();
                
                // Mặt trên
                ctx.beginPath();
                ctx.moveTo(blockAPoints[2].x, blockAPoints[2].y);
                ctx.lineTo(blockAPoints[3].x, blockAPoints[3].y);
                ctx.lineTo(blockAPoints[4].x, blockAPoints[4].y);
                ctx.lineTo(blockAPoints[7].x, blockAPoints[7].y);
                ctx.closePath();
                ctx.fillStyle = '#5D4037';
                ctx.fill();
                
                // Mặt trước
                ctx.beginPath();
                ctx.moveTo(blockAPoints[0].x, blockAPoints[0].y);
                ctx.lineTo(blockAPoints[1].x, blockAPoints[1].y);
                ctx.lineTo(blockAPoints[2].x, blockAPoints[2].y);
                ctx.lineTo(blockAPoints[3].x, blockAPoints[3].y);
                ctx.closePath();
                ctx.fillStyle = woodColor;
                ctx.fill();
                
                // Vẽ khối B
                const blockBY = dimensions.blockA.height;
                const blockBPoints = [
                    project(50, blockBY, 50),
                    project(50 + dimensions.blockB.width, blockBY, 50),
                    project(50 + dimensions.blockB.width, blockBY + dimensions.blockB.height, 50),
                    project(50, blockBY + dimensions.blockB.height, 50),
                    project(50, blockBY + dimensions.blockB.height, 50 + dimensions.blockB.depth),
                    project(50, blockBY, 50 + dimensions.blockB.depth),
                    project(50 + dimensions.blockB.width, blockBY, 50 + dimensions.blockB.depth),
                    project(50 + dimensions.blockB.width, blockBY + dimensions.blockB.height, 50 + dimensions.blockB.depth)
                ];
                
                // Mặt bên trái khối B
                ctx.beginPath();
                ctx.moveTo(blockBPoints[0].x, blockBPoints[0].y);
                ctx.lineTo(blockBPoints[5].x, blockBPoints[5].y);
                ctx.lineTo(blockBPoints[4].x, blockBPoints[4].y);
                ctx.lineTo(blockBPoints[3].x, blockBPoints[3].y);
                ctx.closePath();
                ctx.fillStyle = '#6B2B0F';
                ctx.fill();
                
                // Mặt trước khối B
                ctx.beginPath();
                ctx.moveTo(blockBPoints[0].x, blockBPoints[0].y);
                ctx.lineTo(blockBPoints[1].x, blockBPoints[1].y);
                ctx.lineTo(blockBPoints[2].x, blockBPoints[2].y);
                ctx.lineTo(blockBPoints[3].x, blockBPoints[3].y);
                ctx.closePath();
                ctx.fillStyle = lightWood;
                ctx.fill();
                
                // Vẽ khối C
                const blockCY = blockBY + dimensions.blockB.height;
                const blockCPoints = [
                    project(0, blockCY, 0),
                    project(dimensions.blockC.width, blockCY, 0),
                    project(dimensions.blockC.width, blockCY + dimensions.blockC.height, 0),
                    project(0, blockCY + dimensions.blockC.height, 0),
                    project(0, blockCY + dimensions.blockC.height, dimensions.blockC.depth),
                    project(0, blockCY, dimensions.blockC.depth),
                    project(dimensions.blockC.width, blockCY, dimensions.blockC.depth),
                    project(dimensions.blockC.width, blockCY + dimensions.blockC.height, dimensions.blockC.depth)
                ];
                
                // Mặt bên trái khối C
                ctx.beginPath();
                ctx.moveTo(blockCPoints[0].x, blockCPoints[0].y);
                ctx.lineTo(blockCPoints[5].x, blockCPoints[5].y);
                ctx.lineTo(blockCPoints[4].x, blockCPoints[4].y);
                ctx.lineTo(blockCPoints[3].x, blockCPoints[3].y);
                ctx.closePath();
                ctx.fillStyle = '#6B2B0F';
                ctx.fill();
                
                // Mặt trước khối C
                ctx.beginPath();
                ctx.moveTo(blockCPoints[0].x, blockCPoints[0].y);
                ctx.lineTo(blockCPoints[1].x, blockCPoints[1].y);
                ctx.lineTo(blockCPoints[2].x, blockCPoints[2].y);
                ctx.lineTo(blockCPoints[3].x, blockCPoints[3].y);
                ctx.closePath();
                ctx.fillStyle = woodColor;
                ctx.fill();
                
                // Vẽ tiêu đề
                ctx.font = 'bold 28px Arial';
                ctx.fillStyle = '#5D4037';
                ctx.textAlign = 'center';
                ctx.fillText('THIẾT KẾ TỦ THUỐC BẮC - MẶT NGHIÊNG', canvas.width / 2, 40);
            }
            
            // Vẽ chi tiết các khối
            function drawDetailsView() {
                // Xóa canvas
                ctx.fillStyle = '#f5f5f5';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                // Vẽ chi tiết khối A
                drawBlockADetails(50, 50);
                
                // Vẽ chi tiết khối B
                drawBlockBDetails(50, 400);
                
                // Vẽ chi tiết khối C
                drawBlockCDetails(50, 800);
                
                // Vẽ tiêu đề
                ctx.font = 'bold 28px Arial';
                ctx.fillStyle = '#5D4037';
                ctx.textAlign = 'center';
                ctx.fillText('CHI TIẾT CÁC KHỐI CỦA TỦ THUỐC BẮC', canvas.width / 2, 30);
            }
            
            // Vẽ chi tiết khối A
            function drawBlockADetails(x, y) {
                // Vẽ tiêu đề khối
                ctx.font = 'bold 20px Arial';
                ctx.fillStyle = '#5D4037';
                ctx.textAlign = 'left';
                ctx.fillText('KHỐI A (DƯỚI CÙNG)', x, y - 10);
                
                // Vẽ ô cửa
                const doorWidth = compartmentA.width * scale / 10;
                const doorHeight = compartmentA.height * scale / 10;
                
                ctx.fillStyle = woodColor;
                ctx.fillRect(x, y, doorWidth, doorHeight);
                
                // Vẽ viền cửa
                ctx.strokeStyle = darkWood;
                ctx.lineWidth = 2;
                ctx.strokeRect(x, y, doorWidth, doorHeight);
                
                // Vẽ đợt ngang
                ctx.fillStyle = dividerColor;
                ctx.fillRect(x + 10, y + doorHeight / 2 - 5, doorWidth - 20, 10);
                
                // Vẽ khóa
                ctx.beginPath();
                ctx.fillStyle = handleColor;
                ctx.arc(x + doorWidth - 20, y + doorHeight / 2, 8, 0, Math.PI * 2);
                ctx.fill();
                
                // Vẽ chú thích
                ctx.font = '14px Arial';
                ctx.fillStyle = '#5D4037';
                ctx.fillText(`Kích thước ô: ${compartmentA.height/10}cm × ${compartmentA.width/10}cm`, x + doorWidth + 20, y + 30);
                ctx.fillText(`Đợt ngang: ${compartmentA.height/10}cm × ${compartmentA.width/10}cm × 1cm`, x + doorWidth + 20, y + 60);
                ctx.fillText(`Cửa 1 cánh có khóa`, x + doorWidth + 20, y + 90);
            }
            
            // Vẽ chi tiết khối B
            function drawBlockBDetails(x, y) {
                // Vẽ tiêu đề khối
                ctx.font = 'bold 20px Arial';
                ctx.fillStyle = '#5D4037';
                ctx.textAlign = 'left';
                ctx.fillText('KHỐI B (GIỮA) - NGĂN KÉO CHIA ĐÔI', x, y - 10);
                
                // Vẽ ngăn kéo
                const drawerWidth = drawerB.width * scale / 10;
                const drawerHeight = drawerB.height * scale / 10;
                
                ctx.fillStyle = drawerFrontColor;
                ctx.fillRect(x, y, drawerWidth, drawerHeight);
                
                // Vẽ viền ngăn kéo
                ctx.strokeStyle = darkWood;
                ctx.lineWidth = 1;
                ctx.strokeRect(x, y, drawerWidth, drawerHeight);
                
                // Vẽ vách ngăn dọc
                ctx.fillStyle = dividerColor;
                ctx.fillRect(x + drawerWidth / 2 - 5, y, 10, drawerHeight);
                
                // Vẽ tay nắm (2 tay nắm)
                ctx.beginPath();
                ctx.fillStyle = handleColor;
                ctx.arc(x + drawerWidth / 4, y + drawerHeight / 2, 6, 0, Math.PI * 2);
                ctx.fill();
                
                ctx.beginPath();
                ctx.fillStyle = handleColor;
                ctx.arc(x + drawerWidth * 3/4, y + drawerHeight / 2, 6, 0, Math.PI * 2);
                ctx.fill();
                
                // Vẽ chú thích
                ctx.font = '14px Arial';
                ctx.fillStyle = '#5D4037';
                ctx.fillText(`Kích thước ngăn: ${drawerB.height/10}cm × ${drawerB.width/10}cm × ${drawerB.depth/10}cm`, x + drawerWidth + 20, y + 30);
                ctx.fillText(`Vách ngăn dọc dày 1cm chia thành 2 ngăn nhỏ`, x + drawerWidth + 20, y + 60);
                ctx.fillText(`Mỗi ngăn nhỏ: ${drawerB.height/10}cm × ${drawerB.width/10}cm × 29cm`, x + drawerWidth + 20, y + 90);
                ctx.fillText(`Hệ thống ray bi trượt`, x + drawerWidth + 20, y + 120);
            }
            
            // Vẽ chi tiết khối C
            function drawBlockCDetails(x, y) {
                // Vẽ tiêu đề khối
                ctx.font = 'bold 20px Arial';
                ctx.fillStyle = '#5D4037';
                ctx.textAlign = 'left';
                ctx.fillText('KHỐI C (TRÊN CÙNG)', x, y - 10);
                
                // Vẽ ô cửa
                const doorWidth = compartmentC.width * scale / 10;
                const doorHeight = compartmentC.height * scale / 10;
                
                ctx.fillStyle = woodColor;
                ctx.fillRect(x, y, doorWidth, doorHeight);
                
                // Vẽ viền cửa
                ctx.strokeStyle = darkWood;
                ctx.lineWidth = 2;
                ctx.strokeRect(x, y, doorWidth, doorHeight);
                
                // Vẽ đợt ngang
                ctx.fillStyle = dividerColor;
                ctx.fillRect(x + 10, y + doorHeight / 2 - 5, doorWidth - 20, 10);
                
                // Vẽ bản lề
                ctx.beginPath();
                ctx.fillStyle = '#777';
                ctx.arc(x + 15, y + doorHeight / 2, 5, 0, Math.PI * 2);
                ctx.fill();
                
                // Vẽ chú thích
                ctx.font = '14px Arial';
                ctx.fillStyle = '#5D4037';
                ctx.fillText(`Kích thước ô: ${compartmentC.height/10}cm × ${compartmentC.width/10}cm`, x + doorWidth + 20, y + 30);
                ctx.fillText(`Đợt ngang: 59cm × ${compartmentC.width/10}cm × 1cm`, x + doorWidth + 20, y + 60);
                ctx.fillText(`Cửa 1 cánh bản lề cường lực (không khóa)`, x + doorWidth + 20, y + 90);
            }
            
            // Xử lý sự kiện nút
            viewFrontBtn.addEventListener('click', function() {
                currentView = 'front';
                updateActiveButton(this);
                drawCabinet();
            });
            
            viewSideBtn.addEventListener('click', function() {
                currentView = 'side';
                updateActiveButton(this);
                drawCabinet();
            });
            
            viewDetailsBtn.addEventListener('click', function() {
                currentView = 'details';
                updateActiveButton(this);
                drawCabinet();
            });
            
            // Cập nhật nút active
            function updateActiveButton(activeBtn) {
                document.querySelectorAll('button').forEach(btn => {
                    btn.classList.remove('active');
                });
                activeBtn.classList.add('active');
            }
            
            // Vẽ ban đầu
            drawCabinet();
            
            // Xử lý thay đổi kích thước cửa sổ
            window.addEventListener('resize', function() {
                canvas.width = document.querySelector('.canvas-container').clientWidth;
                canvas.height = document.querySelector('.canvas-container').clientHeight;
                drawCabinet();
            });
        });
    </script>
</body>
</html>
