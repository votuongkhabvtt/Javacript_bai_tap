<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tủ Thuốc Bắc - Mặt Nghiêng Bên Trái</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background: #f5f5f5;
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
            max-width: 1000px;
        }
        
        h1 {
            color: #8B4513;
            margin-bottom: 10px;
        }
        
        .canvas-container {
            width: 900px;
            height: 700px;
            background: white;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
            position: relative;
            overflow: hidden;
        }
        
        canvas {
            display: block;
        }
        
        .specs {
            margin-top: 30px;
            max-width: 900px;
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0,0,0,0.1);
        }
        
        .spec-item {
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
        }
        
        .spec-item h3 {
            color: #8B4513;
            margin-top: 0;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>THIẾT KẾ TỦ THUỐC BẮC - MẶT NGHIÊNG BÊN TRÁI</h1>
        <p>Góc nhìn 3D đầy đủ 3 khối chồng nhau</p>
    </div>
    
    <div class="canvas-container">
        <canvas id="cabinet3d" width="900" height="700"></canvas>
    </div>
    
    <div class="specs">
        <div class="spec-item">
            <h3>Khối A (Dưới cùng)</h3>
            <p>Kích thước: 1m (cao) × 3.7m (rộng) × 1m (sâu) | 9 ô cửa có khóa | Đợt ngang di động</p>
        </div>
        <div class="spec-item">
            <h3>Khối B (Giữa)</h3>
            <p>Kích thước: 1.6m × 3.6m × 0.59m | 96 ngăn kéo chia đôi | Ray bi trượt</p>
        </div>
        <div class="spec-item">
            <h3>Khối C (Trên cùng)</h3>
            <p>Kích thước: 0.5m × 3.7m × 0.6m | 9 ô cửa bản lề cường lực | Đợt ngang di động</p>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const canvas = document.getElementById('cabinet3d');
            const ctx = canvas.getContext('2d');
            
            // Kích thước các khối (mm)
            const blockA = { width: 3700, height: 1000, depth: 1000 };
            const blockB = { width: 3600, height: 1600, depth: 590 };
            const blockC = { width: 3700, height: 500, depth: 600 };
            
            // Màu sắc
            const woodColor = '#8B4513';
            const darkWood = '#5D4037';
            const lightWood = '#A0522D';
            const drawerFrontColor = '#7D3C1F';
            const handleColor = '#2C3E50';
            const dividerColor = '#5D4037';
            
            // Góc nhìn nghiêng 30 độ
            const angle = Math.PI / 6;
            
            // Hàm chuyển đổi tọa độ 3D sang 2D
            function project(x, y, z) {
                const projectedX = (x - z * Math.cos(angle)) * 0.2 + 450;
                const projectedY = 650 - (y + z * Math.sin(angle)) * 0.2;
                return { x: projectedX, y: projectedY };
            }
            
            // Vẽ khối A
            function drawBlockA() {
                const points = [
                    project(0, 0, 0),
                    project(blockA.width, 0, 0),
                    project(blockA.width, blockA.height, 0),
                    project(0, blockA.height, 0),
                    project(0, blockA.height, blockA.depth),
                    project(0, 0, blockA.depth),
                    project(blockA.width, 0, blockA.depth),
                    project(blockA.width, blockA.height, blockA.depth)
                ];
                
                // Mặt bên trái
                ctx.beginPath();
                ctx.moveTo(points[0].x, points[0].y);
                ctx.lineTo(points[5].x, points[5].y);
                ctx.lineTo(points[4].x, points[4].y);
                ctx.lineTo(points[3].x, points[3].y);
                ctx.closePath();
                ctx.fillStyle = '#6B2B0F';
                ctx.fill();
                
                // Mặt trên
                ctx.beginPath();
                ctx.moveTo(points[2].x, points[2].y);
                ctx.lineTo(points[3].x, points[3].y);
                ctx.lineTo(points[4].x, points[4].y);
                ctx.lineTo(points[7].x, points[7].y);
                ctx.closePath();
                ctx.fillStyle = '#5D4037';
                ctx.fill();
                
                // Mặt trước
                ctx.beginPath();
                ctx.moveTo(points[0].x, points[0].y);
                ctx.lineTo(points[1].x, points[1].y);
                ctx.lineTo(points[2].x, points[2].y);
                ctx.lineTo(points[3].x, points[3].y);
                ctx.closePath();
                ctx.fillStyle = woodColor;
                ctx.fill();
                
                // Vẽ các ô cửa (9 ô)
                const cols = 9;
                const doorWidth = blockA.width / cols;
                
                for (let i = 0; i < cols; i++) {
                    const doorX = i * doorWidth;
                    
                    // Vẽ cửa
                    const doorPoints = [
                        project(doorX, 0, 0),
                        project(doorX + doorWidth, 0, 0),
                        project(doorX + doorWidth, blockA.height, 0),
                        project(doorX, blockA.height, 0)
                    ];
                    
                    ctx.beginPath();
                    ctx.moveTo(doorPoints[0].x, doorPoints[0].y);
                    ctx.lineTo(doorPoints[1].x, doorPoints[1].y);
                    ctx.lineTo(doorPoints[2].x, doorPoints[2].y);
                    ctx.lineTo(doorPoints[3].x, doorPoints[3].y);
                    ctx.closePath();
                    ctx.fillStyle = '#7D3C1F';
                    ctx.fill();
                    ctx.strokeStyle = darkWood;
                    ctx.lineWidth = 2;
                    ctx.stroke();
                    
                    // Vẽ đợt ngang
                    const shelfY = blockA.height / 2;
                    const shelfPoints = [
                        project(doorX + 50, shelfY, 1),
                        project(doorX + doorWidth - 50, shelfY, 1),
                        project(doorX + doorWidth - 50, shelfY + 10, 1),
                        project(doorX + 50, shelfY + 10, 1)
                    ];
                    
                    ctx.beginPath();
                    ctx.moveTo(shelfPoints[0].x, shelfPoints[0].y);
                    ctx.lineTo(shelfPoints[1].x, shelfPoints[1].y);
                    ctx.lineTo(shelfPoints[2].x, shelfPoints[2].y);
                    ctx.lineTo(shelfPoints[3].x, shelfPoints[3].y);
                    ctx.closePath();
                    ctx.fillStyle = dividerColor;
                    ctx.fill();
                    
                    // Vẽ khóa
                    const handlePos = project(doorX + doorWidth - 100, blockA.height / 2, 1);
                    ctx.beginPath();
                    ctx.arc(handlePos.x, handlePos.y, 8, 0, Math.PI * 2);
                    ctx.fillStyle = handleColor;
                    ctx.fill();
                }
                
                // Vẽ chân tủ
                const basePoints = [
                    project(-50, blockA.height, -50),
                    project(blockA.width + 50, blockA.height, -50),
                    project(blockA.width + 50, blockA.height, blockA.depth + 50),
                    project(-50, blockA.height, blockA.depth + 50)
                ];
                
                ctx.beginPath();
                ctx.moveTo(basePoints[0].x, basePoints[0].y);
                ctx.lineTo(basePoints[1].x, basePoints[1].y);
                ctx.lineTo(basePoints[2].x, basePoints[2].y);
                ctx.lineTo(basePoints[3].x, basePoints[3].y);
                ctx.closePath();
                ctx.fillStyle = darkWood;
                ctx.fill();
            }
            
            // Vẽ khối B
            function drawBlockB() {
                const startY = blockA.height;
                const points = [
                    project(50, startY, 50),
                    project(50 + blockB.width, startY, 50),
                    project(50 + blockB.width, startY + blockB.height, 50),
                    project(50, startY + blockB.height, 50),
                    project(50, startY + blockB.height, 50 + blockB.depth),
                    project(50, startY, 50 + blockB.depth),
                    project(50 + blockB.width, startY, 50 + blockB.depth),
                    project(50 + blockB.width, startY + blockB.height, 50 + blockB.depth)
                ];
                
                // Mặt bên trái
                ctx.beginPath();
                ctx.moveTo(points[0].x, points[0].y);
                ctx.lineTo(points[5].x, points[5].y);
                ctx.lineTo(points[4].x, points[4].y);
                ctx.lineTo(points[3].x, points[3].y);
                ctx.closePath();
                ctx.fillStyle = '#6B2B0F';
                ctx.fill();
                
                // Mặt trước
                ctx.beginPath();
                ctx.moveTo(points[0].x, points[0].y);
                ctx.lineTo(points[1].x, points[1].y);
                ctx.lineTo(points[2].x, points[2].y);
                ctx.lineTo(points[3].x, points[3].y);
                ctx.closePath();
                ctx.fillStyle = lightWood;
                ctx.fill();
                
                // Vẽ các ngăn kéo (12 cột x 8 hàng)
                const cols = 12;
                const rows = 8;
                const drawerWidth = blockB.width / cols;
                const drawerHeight = blockB.height / rows;
                
                for (let row = 0; row < rows; row++) {
                    for (let col = 0; col < cols; col++) {
                        const drawerX = 50 + col * drawerWidth;
                        const drawerY = startY + row * drawerHeight;
                        
                        // Vẽ mặt trước ngăn kéo
                        const drawerPoints = [
                            project(drawerX, drawerY, 50),
                            project(drawerX + drawerWidth, drawerY, 50),
                            project(drawerX + drawerWidth, drawerY + drawerHeight, 50),
                            project(drawerX, drawerY + drawerHeight, 50)
                        ];
                        
                        ctx.beginPath();
                        ctx.moveTo(drawerPoints[0].x, drawerPoints[0].y);
                        ctx.lineTo(drawerPoints[1].x, drawerPoints[1].y);
                        ctx.lineTo(drawerPoints[2].x, drawerPoints[2].y);
                        ctx.lineTo(drawerPoints[3].x, drawerPoints[3].y);
                        ctx.closePath();
                        ctx.fillStyle = drawerFrontColor;
                        ctx.fill();
                        ctx.strokeStyle = darkWood;
                        ctx.lineWidth = 1;
                        ctx.stroke();
                        
                        // Vẽ vách ngăn dọc
                        const dividerPoints = [
                            project(drawerX + drawerWidth / 2 - 5, drawerY, 51),
                            project(drawerX + drawerWidth / 2 + 5, drawerY, 51),
                            project(drawerX + drawerWidth / 2 + 5, drawerY + drawerHeight, 51),
                            project(drawerX + drawerWidth / 2 - 5, drawerY + drawerHeight, 51)
                        ];
                        
                        ctx.beginPath();
                        ctx.moveTo(dividerPoints[0].x, dividerPoints[0].y);
                        ctx.lineTo(dividerPoints[1].x, dividerPoints[1].y);
                        ctx.lineTo(dividerPoints[2].x, dividerPoints[2].y);
                        ctx.lineTo(dividerPoints[3].x, dividerPoints[3].y);
                        ctx.closePath();
                        ctx.fillStyle = dividerColor;
                        ctx.fill();
                        
                        // Vẽ tay nắm (2 tay nắm)
                        const handle1Pos = project(drawerX + drawerWidth / 4, drawerY + drawerHeight / 2, 51);
                        const handle2Pos = project(drawerX + drawerWidth * 3/4, drawerY + drawerHeight / 2, 51);
                        
                        ctx.beginPath();
                        ctx.arc(handle1Pos.x, handle1Pos.y, 5, 0, Math.PI * 2);
                        ctx.fillStyle = handleColor;
                        ctx.fill();
                        
                        ctx.beginPath();
                        ctx.arc(handle2Pos.x, handle2Pos.y, 5, 0, Math.PI * 2);
                        ctx.fillStyle = handleColor;
                        ctx.fill();
                    }
                }
            }
            
            // Vẽ khối C
            function drawBlockC() {
                const startY = blockA.height + blockB.height;
                const points = [
                    project(0, startY, 0),
                    project(blockC.width, startY, 0),
                    project(blockC.width, startY + blockC.height, 0),
                    project(0, startY + blockC.height, 0),
                    project(0, startY + blockC.height, blockC.depth),
                    project(0, startY, blockC.depth),
                    project(blockC.width, startY, blockC.depth),
                    project(blockC.width, startY + blockC.height, blockC.depth)
                ];
                
                // Mặt bên trái
                ctx.beginPath();
                ctx.moveTo(points[0].x, points[0].y);
                ctx.lineTo(points[5].x, points[5].y);
                ctx.lineTo(points[4].x, points[4].y);
                ctx.lineTo(points[3].x, points[3].y);
                ctx.closePath();
                ctx.fillStyle = '#6B2B0F';
                ctx.fill();
                
                // Mặt trước
                ctx.beginPath();
                ctx.moveTo(points[0].x, points[0].y);
                ctx.lineTo(points[1].x, points[1].y);
                ctx.lineTo(points[2].x, points[2].y);
                ctx.lineTo(points[3].x, points[3].y);
                ctx.closePath();
                ctx.fillStyle = woodColor;
                ctx.fill();
                
                // Vẽ các ô cửa (9 ô)
                const cols = 9;
                const doorWidth = blockC.width / cols;
                
                for (let i = 0; i < cols; i++) {
                    const doorX = i * doorWidth;
                    
                    // Vẽ cửa
                    const doorPoints = [
                        project(doorX, startY, 0),
                        project(doorX + doorWidth, startY, 0),
                        project(doorX + doorWidth, startY + blockC.height, 0),
                        project(doorX, startY + blockC.height, 0)
                    ];
                    
                    ctx.beginPath();
                    ctx.moveTo(doorPoints[0].x, doorPoints[0].y);
                    ctx.lineTo(doorPoints[1].x, doorPoints[1].y);
                    ctx.lineTo(doorPoints[2].x, doorPoints[2].y);
                    ctx.lineTo(doorPoints[3].x, doorPoints[3].y);
                    ctx.closePath();
                    ctx.fillStyle = '#7D3C1F';
                    ctx.fill();
                    ctx.strokeStyle = darkWood;
                    ctx.lineWidth = 2;
                    ctx.stroke();
                    
                    // Vẽ đợt ngang
                    const shelfY = startY + blockC.height / 2;
                    const shelfPoints = [
                        project(doorX + 50, shelfY, 1),
                        project(doorX + doorWidth - 50, shelfY, 1),
                        project(doorX + doorWidth - 50, shelfY + 10, 1),
                        project(doorX + 50, shelfY + 10, 1)
                    ];
                    
                    ctx.beginPath();
                    ctx.moveTo(shelfPoints[0].x, shelfPoints[0].y);
                    ctx.lineTo(shelfPoints[1].x, shelfPoints[1].y);
                    ctx.lineTo(shelfPoints[2].x, shelfPoints[2].y);
                    ctx.lineTo(shelfPoints[3].x, shelfPoints[3].y);
                    ctx.closePath();
                    ctx.fillStyle = dividerColor;
                    ctx.fill();
                    
                    // Vẽ bản lề
                    const hingePos = project(doorX + 30, shelfY, 1);
                    ctx.beginPath();
                    ctx.arc(hingePos.x, hingePos.y, 5, 0, Math.PI * 2);
                    ctx.fillStyle = '#777';
                    ctx.fill();
                }
            }
            
            // Vẽ tủ
            function drawCabinet() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                
                // Vẽ nền
                ctx.fillStyle = '#f5f5f5';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                // Vẽ các khối
                drawBlockA();
                drawBlockB();
                drawBlockC();
                
                // Vẽ hiệu ứng ánh sáng
                const gradient = ctx.createRadialGradient(
                    300, 200, 50,
                    300, 200, 600
                );
                gradient.addColorStop(0, 'rgba(255, 255, 255, 0.2)');
                gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
                
                ctx.fillStyle = gradient;
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                // Vẽ tiêu đề
                ctx.font = 'bold 24px Arial';
                ctx.fillStyle = '#5D4037';
                ctx.textAlign = 'center';
                ctx.fillText('MẶT NGHIÊNG BÊN TRÁI - TỦ THUỐC BẮC 3 KHỐI', canvas.width / 2, 40);
            }
            
            // Vẽ ban đầu
            drawCabinet();
        });
    </script>
</body>
</html>
