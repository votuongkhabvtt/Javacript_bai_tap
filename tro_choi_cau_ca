<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game Câu Cá</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            font-family: Arial, sans-serif;
            background-color: #f0f8ff;
        }
        canvas {
            border: 2px solid #333;
            margin-top: 20px;
            background-color: #87CEEB;
        }
        .info {
            margin-top: 20px;
            font-size: 18px;
        }
        .controls {
            margin-top: 10px;
            font-size: 16px;
        }
    </style>
</head>
<body>
    <h1>Game Câu Cá</h1>
    <div class="controls">Sử dụng phím mũi tên để di chuyển mồi câu</div>
    <canvas id="gameCanvas" width="500" height="300"></canvas>
    <div class="info">
        <p>Thời gian còn lại: <span id="time">10:00</span></p>
        <p>Số cá câu được: <span id="fishCaught">0</span></p>
        <p>Điểm: <span id="score">0</span></p>
    </div>

    <script>
        // Tỷ lệ chuyển đổi từ cm sang pixel (1cm = 50px)
        const SCALE = 50;
        
        // Kích thước bể cá (10cm x 5cm x 3cm)
        const TANK_WIDTH = 10 * SCALE;
        const TANK_HEIGHT = 3 * SCALE;
        const TANK_DEPTH = 5 * SCALE;
        
        // Vị trí bể cá trên canvas
        const TANK_X = 50;
        const TANK_Y = 50;
        
        // Lớp Cá
        class Fish {
            constructor() {
                this.width = 0.5 * SCALE;
                this.height = 0.1 * SCALE;
                this.color = 'yellow';
                this.reset();
                this.speed = 2 * SCALE / 100; // 2mm/giây = 0.2cm/giây
                this.direction = Math.random() * Math.PI * 2; // Hướng ngẫu nhiên
                this.changeDirectionTimer = 0;
                this.eating = false;
                this.eatTimer = 0;
            }
            
            reset() {
                this.x = TANK_X + 0.5 * SCALE;
                this.y = TANK_Y + TANK_HEIGHT - this.height - 0.5 * SCALE;
                this.z = TANK_DEPTH - 0.5 * SCALE;
            }
            
            update(deltaTime) {
                if (this.eating) {
                    this.eatTimer -= deltaTime;
                    if (this.eatTimer <= 0) {
                        this.eating = false;
                    }
                    return;
                }
                
                // Thay đổi hướng sau một khoảng thời gian
                this.changeDirectionTimer -= deltaTime;
                if (this.changeDirectionTimer <= 0) {
                    this.direction = Math.random() * Math.PI * 2;
                    this.changeDirectionTimer = Math.random() * 2000 + 1000; // 1-3 giây
                }
                
                // Di chuyển cá
                this.x += Math.cos(this.direction) * this.speed * deltaTime;
                this.y += Math.sin(this.direction) * this.speed * deltaTime;
                
                // Kiểm tra va chạm với thành bể
                if (this.x < TANK_X + 0.5 * SCALE) {
                    this.x = TANK_X + 0.5 * SCALE;
                    this.direction = Math.PI - this.direction;
                }
                if (this.x > TANK_X + TANK_WIDTH - 0.5 * SCALE) {
                    this.x = TANK_X + TANK_WIDTH - 0.5 * SCALE;
                    this.direction = Math.PI - this.direction;
                }
                if (this.y < TANK_Y + 0.5 * SCALE) {
                    this.y = TANK_Y + 0.5 * SCALE;
                    this.direction = -this.direction;
                }
                if (this.y > TANK_Y + TANK_HEIGHT - 0.5 * SCALE) {
                    this.y = TANK_Y + TANK_HEIGHT - 0.5 * SCALE;
                    this.direction = -this.direction;
                }
            }
            
            draw(ctx) {
                ctx.save();
                ctx.translate(this.x, this.y);
                
                // Vẽ thân cá
                ctx.fillStyle = this.color;
                ctx.beginPath();
                ctx.ellipse(0, 0, this.width / 2, this.height / 2, 0, 0, Math.PI * 2);
                ctx.fill();
                
                // Vẽ đuôi cá
                ctx.beginPath();
                ctx.moveTo(-this.width / 2, 0);
                ctx.lineTo(-this.width / 2 - this.height, -this.height / 2);
                ctx.lineTo(-this.width / 2 - this.height, this.height / 2);
                ctx.closePath();
                ctx.fill();
                
                // Vẽ mắt cá
                ctx.fillStyle = 'black';
                ctx.beginPath();
                ctx.arc(this.width / 4, -this.height / 4, this.height / 5, 0, Math.PI * 2);
                ctx.fill();
                
                ctx.restore();
            }
            
            eat() {
                this.eating = true;
                this.eatTimer = 1000; // 1 giây để "ăn"
            }
        }
        
        // Lớp Mồi Câu
        class Bait {
            constructor() {
                this.radius = 0.15 * SCALE; // Đường kính 0.3cm
                this.color = 'red';
                this.x = TANK_X + TANK_WIDTH / 2;
                this.y = TANK_Y + 0.5 * SCALE;
                this.z = TANK_DEPTH / 2;
                this.speed = 3 * SCALE / 100; // 3mm/giây
                this.keys = {
                    up: false,
                    down: false,
                    left: false,
                    right: false
                };
                this.hooked = false;
            }
            
            update(deltaTime) {
                if (this.hooked) return;
                
                // Di chuyển mồi theo phím
                if (this.keys.up && this.y > TANK_Y + this.radius) {
                    this.y -= this.speed * deltaTime;
                }
                if (this.keys.down && this.y < TANK_Y + TANK_HEIGHT - this.radius) {
                    this.y += this.speed * deltaTime;
                }
                if (this.keys.left && this.x > TANK_X + this.radius) {
                    this.x -= this.speed * deltaTime;
                }
                if (this.keys.right && this.x < TANK_X + TANK_WIDTH - this.radius) {
                    this.x += this.speed * deltaTime;
                }
            }
            
            draw(ctx) {
                ctx.save();
                ctx.fillStyle = this.color;
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fill();
                
                // Vẽ dây câu nếu mồi chưa móc cá
                if (!this.hooked) {
                    ctx.strokeStyle = 'black';
                    ctx.lineWidth = 1;
                    ctx.beginPath();
                    ctx.moveTo(this.x, this.y);
                    ctx.lineTo(this.x, TANK_Y);
                    ctx.stroke();
                }
                
                ctx.restore();
            }
            
            checkCollision(fish) {
                if (this.hooked || fish.eating) return false;
                
                const dx = this.x - fish.x;
                const dy = this.y - fish.y;
                const distance = Math.sqrt(dx * dx + dy * dy);
                
                return distance < (this.radius + fish.width / 2);
            }
            
            hook() {
                this.hooked = true;
            }
            
            reset() {
                this.x = TANK_X + TANK_WIDTH / 2;
                this.y = TANK_Y + 0.5 * SCALE;
                this.hooked = false;
            }
        }
        
        // Lớp Game
        class FishingGame {
            constructor() {
                this.canvas = document.getElementById('gameCanvas');
                this.ctx = this.canvas.getContext('2d');
                this.fishes = [new Fish()];
                this.bait = new Bait();
                this.score = 0;
                this.fishCaught = 0;
                this.gameTime = 10 * 60 * 1000; // 10 phút (milliseconds)
                this.startTime = Date.now();
                this.lastTime = 0;
                this.waveOffset = 0;
                
                // Bắt sự kiện bàn phím
                window.addEventListener('keydown', (e) => this.handleKeyDown(e));
                window.addEventListener('keyup', (e) => this.handleKeyUp(e));
                
                // Bắt đầu game loop
                requestAnimationFrame((timestamp) => this.gameLoop(timestamp));
            }
            
            handleKeyDown(e) {
                switch (e.key) {
                    case 'ArrowUp':
                        this.bait.keys.up = true;
                        break;
                    case 'ArrowDown':
                        this.bait.keys.down = true;
                        break;
                    case 'ArrowLeft':
                        this.bait.keys.left = true;
                        break;
                    case 'ArrowRight':
                        this.bait.keys.right = true;
                        break;
                }
            }
            
            handleKeyUp(e) {
                switch (e.key) {
                    case 'ArrowUp':
                        this.bait.keys.up = false;
                        break;
                    case 'ArrowDown':
                        this.bait.keys.down = false;
                        break;
                    case 'ArrowLeft':
                        this.bait.keys.left = false;
                        break;
                    case 'ArrowRight':
                        this.bait.keys.right = false;
                        break;
                }
            }
            
            gameLoop(timestamp) {
                // Tính toán thời gian delta
                if (!this.lastTime) this.lastTime = timestamp;
                const deltaTime = timestamp - this.lastTime;
                this.lastTime = timestamp;
                
                // Cập nhật trạng thái game
                this.update(deltaTime);
                
                // Vẽ game
                this.draw();
                
                // Tiếp tục game loop
                if (this.gameTime > 0) {
                    requestAnimationFrame((ts) => this.gameLoop(ts));
                } else {
                    this.gameOver();
                }
            }
            
            update(deltaTime) {
                // Cập nhật thời gian
                this.gameTime -= deltaTime;
                
                // Cập nhật cá
                this.fishes.forEach(fish => fish.update(deltaTime));
                
                // Cập nhật mồi
                this.bait.update(deltaTime);
                
                // Kiểm tra va chạm
                if (!this.bait.hooked) {
                    for (let i = 0; i < this.fishes.length; i++) {
                        if (this.bait.checkCollision(this.fishes[i])) {
                            this.fishes[i].eat();
                            this.bait.hook();
                            this.score += 10;
                            this.fishCaught++;
                            
                            // Thêm cá mới nếu còn thời gian
                            if (this.gameTime > 0) {
                                setTimeout(() => {
                                    this.fishes.push(new Fish());
                                    this.bait.reset();
                                }, 1000);
                            }
                            
                            // Cập nhật UI
                            document.getElementById('score').textContent = this.score;
                            document.getElementById('fishCaught').textContent = this.fishCaught;
                            break;
                        }
                    }
                }
                
                // Cập nhật hiệu ứng sóng
                this.waveOffset += deltaTime * 0.001;
            }
            
            draw() {
                const ctx = this.ctx;
                
                // Xóa canvas
                ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                
                // Vẽ bể cá
                this.drawTank();
                
                // Vẽ cá
                this.fishes.forEach(fish => fish.draw(ctx));
                
                // Vẽ mồi
                this.bait.draw(ctx);
                
                // Cập nhật thời gian trên UI
                const minutes = Math.floor(this.gameTime / 60000);
                const seconds = Math.floor((this.gameTime % 60000) / 1000);
                document.getElementById('time').textContent = 
                    `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }
            
            drawTank() {
                const ctx = this.ctx;
                
                // Vẽ đáy bể
                ctx.fillStyle = 'rgba(0, 0, 139, 0.3)'; // Xanh đậm trong suốt
                ctx.fillRect(TANK_X, TANK_Y + TANK_HEIGHT, TANK_WIDTH, TANK_DEPTH);
                
                // Vẽ thành bể (4 mặt)
                ctx.strokeStyle = 'rgba(0, 0, 139, 0.5)';
                ctx.lineWidth = 2;
                
                // Mặt trước
                ctx.beginPath();
                ctx.moveTo(TANK_X, TANK_Y);
                ctx.lineTo(TANK_X + TANK_WIDTH, TANK_Y);
                ctx.lineTo(TANK_X + TANK_WIDTH, TANK_Y + TANK_HEIGHT);
                ctx.lineTo(TANK_X, TANK_Y + TANK_HEIGHT);
                ctx.closePath();
                ctx.stroke();
                
                // Vẽ mặt nước với hiệu ứng sóng
                ctx.fillStyle = 'rgba(64, 164, 223, 0.5)';
                ctx.beginPath();
                ctx.moveTo(TANK_X, TANK_Y);
                
                const waveHeight = 2;
                const waveLength = 50;
                
                for (let x = 0; x <= TANK_WIDTH; x += 5) {
                    const y = TANK_Y + Math.sin(x / waveLength + this.waveOffset) * waveHeight;
                    ctx.lineTo(TANK_X + x, y);
                }
                
                ctx.lineTo(TANK_X + TANK_WIDTH, TANK_Y + TANK_HEIGHT);
                ctx.lineTo(TANK_X, TANK_Y + TANK_HEIGHT);
                ctx.closePath();
                ctx.fill();
            }
            
            gameOver() {
                this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
                this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
                
                this.ctx.fillStyle = 'white';
                this.ctx.font = '30px Arial';
                this.ctx.textAlign = 'center';
                this.ctx.fillText('Game Over!', this.canvas.width / 2, this.canvas.height / 2 - 30);
                this.ctx.font = '20px Arial';
                this.ctx.fillText(`Bạn đã câu được ${this.fishCaught} con cá`, this.canvas.width / 2, this.canvas.height / 2 + 10);
                this.ctx.fillText(`Tổng điểm: ${this.score}`, this.canvas.width / 2, this.canvas.height / 2 + 40);
            }
        }
        
        // Khởi tạo game khi trang tải xong
        window.onload = () => {
            new FishingGame();
        };
    </script>
</body>
</html>
